/*
 *  Copyright 2022-2023 LAIKA. Authored by Mitch Prater.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
#include "prmanapi.h"
#include "RiTypesHelper.h"

#include "RixBxdf.h"
#include "RixBxdfLobe.h"
#include "RixShading.h"
#include "RixShadingUtils.h"


/*
 *  Defines the response sample methods of the RixBxdf object:
 *      GenerateSample()
 *      EvaluateSample()
 *      EvaluateSamplesAtIndex()
 *      EmitLocal() - optional
 *
 *  These methods implement the response(s) produced by this plugin.
 * 
 *  Notation (vectors originate at the surface):
 *      wi - incident direction: the "light" direction. a.k.a. "incoming".
 *      wo - observer direction: the "view" direction. a.k.a. "outgoing".
 *      wg - the geometric (modeled surface) normal.
 *      ws - surface shading normal. possibly "bumped" relative to wg.
 *      wn - response computation normal. generally equivalent to ws.
 *      Cs - the substance's characteristic (un-lit) coloration (spectrum).
 *      Cr - the response color & magnitude (spectrum*intensity).
 *      W  - the response weight.
 *      fPdf - forward pdf: probability of light moving from wi toward wo.
 *      rPdf - reverse pdf: probability of light moving from wo toward wi.
 */


//===================================================================
//  2022 Prater "fuzz" response function.
//  Simulates the presence of a surface boundary layer consisting
//  of fibers oriented perpendicularly to the surface: e.g. velvet.
//  Originally developed in the 1990's, but has undergone continuous
//  revision since then. Unpublished.
//===================================================================
PRMAN_INLINE
float PraterFuzzResponse
(
    const float  g, // Direction: -1 < g < +1
    const float  f, // 1-Dispersion: 0 ≤ f ≤ 1
    const float  cos_theta, // Θ = wi ∠ wo
    const float  cos_wnwi,
    const float  cos_wnwo
)
{
    // Forward/backward scattering weight.
    // t = ray/unit-circle intersection distance.
    // ray direction d = ( cos_theta, sin_theta )
    // ray origin p = ( g, 0 ); 0 < g ⇒ forward scattering.
    const float  dot_pp = g*g;
    const float  dot_pd = cos_theta*g;
    const float  t = std::sqrt( dot_pd*dot_pd - dot_pp + 1.0f ) - dot_pd;

    // Asperity.
    const float  asperity_wi = 1.0f - std::abs( cos_wnwi );
    const float  asperity_wo = 1.0f - std::abs( cos_wnwo );

    const float  asperity_broad = (asperity_wi + asperity_wo) * 0.5f;
    const float  asperity_narrow = asperity_wi * asperity_wo;
    const float  asperity = f*f*(asperity_narrow - asperity_broad) + asperity_broad;

    // Response function.
    const float  e = 0.5f + 3.5f*f; // RixMix( 0.5, 4.0, f );
    const float  r = std::pow( t * asperity, e );

    return r;
}

// Compute the response normalization for the entire (spherical domain)
// response lobe for the given parameters g, f, and cos_wnwi.
// Provided by Per Christensen, Nov. 2023. Thanks Per!
PRMAN_INLINE
float PraterFuzzNormalize
(
    const float  _g,
    const float  _f,
    const float  _cos_wnwi
)
{
   /*
    *  Response integral table for Prater Fuzz.
    *
    *  11x21x19 = 4389 values:
    *  11 values between 0 and 0.99 for g = 0.99*Direction.
    *  21 values between 0 and 1 for f = 1-Dispersion.
    *  19 values between 0 and 90 degrees (5 degree increments) for the (reflection) angle theta.
    */
    const int  gNum = 11;
    const int  fNum = 21;
    const int  thetaNum = 19;

    static const float IntegralTable[gNum*fNum*thetaNum] = {
    5.9238, 5.9563, 6.0483, 6.1919, 6.3800, 6.6057, 6.8628, 7.1458, 7.4496, 7.7696, 8.1017, 8.4424, 8.7884, 9.1367, 9.4848, 9.8304, 10.1712, 10.5054, 10.8313, 
    4.6910, 4.7206, 4.8070, 4.9460, 5.1329, 5.3627, 5.6308, 5.9323, 6.2626, 6.6175, 6.9928, 7.3845, 7.7890, 8.2027, 8.6223, 9.0447, 9.4669, 9.8861, 10.2996, 
    3.7364, 3.7629, 3.8414, 3.9703, 4.1470, 4.3688, 4.6325, 4.9349, 5.2725, 5.6418, 6.0392, 6.4610, 6.9035, 7.3630, 7.8359, 8.3185, 8.8071, 9.2982, 9.7883, 
    2.9792, 3.0027, 3.0731, 3.1900, 3.3527, 3.5602, 3.8111, 4.1037, 4.4361, 4.8058, 5.2102, 5.6463, 6.1109, 6.6006, 7.1116, 7.6401, 8.1821, 8.7335, 9.2900, 
    2.3674, 2.3882, 2.4507, 2.5553, 2.7026, 2.8930, 3.1265, 3.4030, 3.7220, 4.0824, 4.4829, 4.9214, 5.3955, 5.9025, 6.4389, 7.0011, 7.5849, 8.1858, 8.7993, 
    1.8668, 1.8850, 1.9400, 2.0327, 2.1644, 2.3364, 2.5502, 2.8069, 3.1073, 3.4518, 3.8403, 4.2720, 4.7458, 5.2594, 5.8104, 6.3954, 7.0105, 7.6512, 8.3126, 
    1.4541, 1.4699, 1.5179, 1.5992, 1.7155, 1.8690, 2.0620, 2.2966, 2.5751, 2.8991, 3.2698, 3.6878, 4.1530, 4.6646, 5.2208, 5.8191, 6.4560, 7.1274, 7.8282, 
    1.1134, 1.1271, 1.1684, 1.2388, 1.3403, 1.4754, 1.6472, 1.8587, 2.1132, 2.4135, 2.7621, 3.1610, 3.6113, 4.1134, 4.6669, 5.2700, 5.9202, 6.6138, 7.3461, 
    0.8337, 0.8452, 0.8803, 0.9403, 1.0275, 1.1447, 1.2953, 1.4833, 1.7125, 1.9870, 2.3104, 2.6859, 3.1161, 3.6027, 4.1466, 4.7472, 5.4030, 6.1112, 6.8674, 
    0.6065, 0.6161, 0.6452, 0.6954, 0.7689, 0.8688, 0.9987, 1.1631, 1.3665, 1.6137, 1.9096, 2.2586, 2.6645, 3.1306, 3.6591, 4.2508, 4.9054, 5.6212, 6.3946, 
    0.4255, 0.4332, 0.4569, 0.4979, 0.5584, 0.6416, 0.7514, 0.8925, 1.0699, 1.2892, 1.5561, 1.8762, 2.2546, 2.6961, 3.2042, 3.7816, 4.4292, 5.1465, 5.9312, 
    0.2852, 0.2912, 0.3098, 0.3422, 0.3906, 0.4581, 0.5487, 0.6671, 0.8189, 1.0100, 1.2470, 1.5365, 1.8850, 2.2986, 2.7824, 3.3407, 3.9763, 4.6900, 5.4811, 
    0.1804, 0.1849, 0.1989, 0.2235, 0.2608, 0.3138, 0.3863, 0.4831, 0.6099, 0.7731, 0.9800, 1.2379, 1.5547, 1.9378, 2.3941, 2.9296, 3.5490, 4.2550, 5.0484, 
    0.1060, 0.1092, 0.1191, 0.1368, 0.1643, 0.2041, 0.2600, 0.3366, 0.4397, 0.5758, 0.7528, 0.9788, 1.2627, 1.6134, 2.0397, 2.5494, 3.1493, 3.8444, 4.6372, 
    0.0565, 0.0586, 0.0651, 0.0771, 0.0961, 0.1245, 0.1656, 0.2239, 0.3048, 0.4153, 0.5631, 0.7573, 1.0079, 1.3251, 1.7195, 2.2010, 2.7789, 3.4605, 4.2510, 
    0.0264, 0.0276, 0.0316, 0.0389, 0.0510, 0.0699, 0.0984, 0.1406, 0.2016, 0.2882, 0.4084, 0.5718, 0.7890, 1.0721, 1.4332, 1.8848, 2.4386, 3.1049, 3.8920, 
    0.0102, 0.0108, 0.0129, 0.0169, 0.0238, 0.0352, 0.0535, 0.0822, 0.1259, 0.1911, 0.2857, 0.4196, 0.6044, 0.8531, 1.1802, 1.6004, 2.1286, 2.7784, 3.5617, 
    0.0029, 0.0032, 0.0041, 0.0059, 0.0093, 0.0153, 0.0259, 0.0439, 0.0733, 0.1199, 0.1916, 0.2981, 0.4517, 0.6667, 0.9593, 1.3471, 1.8483, 2.4806, 3.2601, 
    0.0005, 0.0006, 0.0008, 0.0014, 0.0027, 0.0054, 0.0107, 0.0208, 0.0390, 0.0704, 0.1221, 0.2039, 0.3283, 0.5106, 0.7689, 1.1236, 1.5966, 2.2103, 2.9861, 
    0.5e-4, 0.5e-4, 0.0001, 0.0002, 0.0005, 0.0014, 0.0035, 0.0084, 0.0185, 0.0380, 0.0733, 0.1336, 0.2312, 0.3824, 0.6069, 0.9280, 1.3718, 1.9658, 2.7379, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0002, 0.0008, 0.0027, 0.0075, 0.0185, 0.0409, 0.0831, 0.1571, 0.2793, 0.4711, 0.7585, 1.1719, 1.7451, 2.5133, 
    5.9121, 5.9445, 6.0360, 6.1796, 6.3675, 6.5928, 6.8489, 7.1310, 7.4345, 7.7532, 8.0851, 8.4248, 8.7701, 9.1176, 9.4649, 9.8098, 10.1500, 10.4835, 10.8087, 
    4.6797, 4.7090, 4.7949, 4.9342, 5.1202, 5.3491, 5.6165, 5.9172, 6.2463, 6.6001, 6.9744, 7.3648, 7.7681, 8.1811, 8.5994, 9.0207, 9.4417, 9.8597, 10.2722, 
    3.7259, 3.7524, 3.8304, 3.9590, 4.1350, 4.3565, 4.6186, 4.9199, 5.2565, 5.6245, 6.0199, 6.4407, 6.8815, 7.3399, 7.8112, 8.2921, 8.7791, 9.2687, 9.7574, 
    2.9705, 2.9938, 3.0639, 3.1807, 3.3427, 3.5488, 3.7986, 4.0899, 4.4212, 4.7894, 5.1915, 5.6260, 6.0891, 6.5766, 7.0859, 7.6123, 8.1523, 8.7019, 9.2564, 
    2.3605, 2.3817, 2.4434, 2.5475, 2.6940, 2.8834, 3.1157, 3.3911, 3.7085, 4.0674, 4.4659, 4.9021, 5.3741, 5.8789, 6.4129, 6.9727, 7.5540, 8.1527, 8.7639, 
    1.8621, 1.8799, 1.9348, 2.0268, 2.1574, 2.3283, 2.5414, 2.7967, 3.0957, 3.4378, 3.8244, 4.2536, 4.7255, 5.2363, 5.7848, 6.3668, 6.9794, 7.6172, 8.2760, 
    1.4507, 1.4664, 1.5141, 1.5951, 1.7107, 1.8629, 2.0547, 2.2883, 2.5651, 2.8873, 3.2559, 3.6709, 4.1339, 4.6428, 5.1960, 5.7913, 6.4249, 7.0932, 7.7909, 
    1.1112, 1.1250, 1.1658, 1.2361, 1.3368, 1.4712, 1.6420, 1.8522, 2.1048, 2.4032, 2.7500, 3.1465, 3.5936, 4.0929, 4.6428, 5.2427, 5.8895, 6.5795, 7.3083, 
    0.8325, 0.8442, 0.8790, 0.9385, 1.0251, 1.1419, 1.2914, 1.4782, 1.7063, 1.9789, 2.3001, 2.6724, 3.1000, 3.5836, 4.1240, 4.7209, 5.3728, 6.0770, 6.8294, 
    0.6061, 0.6156, 0.6446, 0.6947, 0.7678, 0.8673, 0.9960, 1.1595, 1.3614, 1.6073, 1.9010, 2.2474, 2.6503, 3.1131, 3.6377, 4.2254, 4.8760, 5.5874, 6.3564, 
    0.4256, 0.4333, 0.4572, 0.4978, 0.5577, 0.6406, 0.7497, 0.8900, 1.0663, 1.2842, 1.5491, 1.8663, 2.2427, 2.6803, 3.1843, 3.7573, 4.4003, 5.1127, 5.8927, 
    0.2856, 0.2918, 0.3101, 0.3425, 0.3905, 0.4579, 0.5479, 0.6654, 0.8162, 1.0066, 1.2413, 1.5287, 1.8740, 2.2847, 2.7643, 3.3176, 3.9483, 4.6567, 5.4423, 
    0.1808, 0.1854, 0.1993, 0.2238, 0.2611, 0.3140, 0.3857, 0.4824, 0.6085, 0.7703, 0.9757, 1.2315, 1.5459, 1.9250, 2.3772, 2.9080, 3.5219, 4.2220, 5.0093, 
    0.1064, 0.1096, 0.1195, 0.1372, 0.1646, 0.2044, 0.2601, 0.3364, 0.4388, 0.5740, 0.7496, 0.9738, 1.2548, 1.6022, 2.0245, 2.5292, 3.1231, 3.8115, 4.5976, 
    0.0568, 0.0589, 0.0655, 0.0774, 0.0964, 0.1247, 0.1657, 0.2238, 0.3044, 0.4142, 0.5609, 0.7534, 1.0016, 1.3152, 1.7059, 2.1821, 2.7536, 3.4279, 4.2109, 
    0.0266, 0.0278, 0.0318, 0.0392, 0.0513, 0.0702, 0.0987, 0.1407, 0.2015, 0.2875, 0.4067, 0.5687, 0.7842, 1.0636, 1.4206, 1.8670, 2.4140, 3.0728, 3.8516, 
    0.0103, 0.0109, 0.0130, 0.0170, 0.0240, 0.0354, 0.0537, 0.0823, 0.1260, 0.1907, 0.2848, 0.4176, 0.6003, 0.8464, 1.1691, 1.5841, 2.1054, 2.7472, 3.5210, 
    0.0030, 0.0032, 0.0041, 0.0059, 0.0093, 0.0154, 0.0261, 0.0440, 0.0733, 0.1198, 0.1909, 0.2965, 0.4485, 0.6611, 0.9500, 1.3322, 1.8265, 2.4500, 3.2193, 
    0.0005, 0.0006, 0.0008, 0.0015, 0.0028, 0.0055, 0.0108, 0.0209, 0.0391, 0.0703, 0.1218, 0.2029, 0.3259, 0.5059, 0.7607, 1.1102, 1.5760, 2.1806, 2.9455, 
    0.5e-4, 0.5e-4, 0.0001, 0.0002, 0.0005, 0.0014, 0.0036, 0.0084, 0.0186, 0.0380, 0.0732, 0.1329, 0.2295, 0.3789, 0.6000, 0.9162, 1.3528, 1.9372, 2.6976, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0002, 0.0008, 0.0027, 0.0076, 0.0185, 0.0408, 0.0827, 0.1559, 0.2766, 0.4655, 0.7481, 1.1547, 1.7180, 2.4736, 
    5.8767, 5.9089, 5.9993, 6.1425, 6.3275, 6.5524, 6.8062, 7.0861, 7.3879, 7.7050, 8.0339, 8.3716, 8.7144, 9.0601, 9.4048, 9.7475, 10.0854, 10.4168, 10.7401, 
    4.6449, 4.6745, 4.7596, 4.8970, 5.0807, 5.3081, 5.5732, 5.8704, 6.1975, 6.5477, 6.9185, 7.3053, 7.7062, 8.1147, 8.5293, 8.9474, 9.3651, 9.7800, 10.1892, 
    3.6958, 3.7212, 3.7985, 3.9258, 4.0998, 4.3175, 4.5773, 4.8761, 5.2085, 5.5721, 5.9631, 6.3790, 6.8161, 7.2688, 7.7357, 8.2119, 8.6944, 9.1795, 9.6636, 
    2.9448, 2.9684, 3.0356, 3.1517, 3.3106, 3.5157, 3.7612, 4.0493, 4.3755, 4.7395, 5.1363, 5.5658, 6.0227, 6.5048, 7.0075, 7.5285, 8.0622, 8.6061, 9.1549, 
    2.3395, 2.3606, 2.4222, 2.5236, 2.6680, 2.8555, 3.0833, 3.3553, 3.6672, 4.0213, 4.4134, 4.8439, 5.3089, 5.8078, 6.3346, 6.8868, 7.4613, 8.0529, 8.6569, 
    1.8462, 1.8639, 1.9182, 2.0085, 2.1373, 2.3056, 2.5153, 2.7662, 3.0591, 3.3971, 3.7772, 4.2002, 4.6634, 5.1674, 5.7071, 6.2818, 6.8854, 7.5149, 8.1655, 
    1.4402, 1.4555, 1.5026, 1.5820, 1.6951, 1.8448, 2.0337, 2.2629, 2.5345, 2.8505, 3.2138, 3.6218, 4.0758, 4.5768, 5.1211, 5.7070, 6.3317, 6.9898, 7.6784, 
    1.1043, 1.1178, 1.1583, 1.2270, 1.3261, 1.4582, 1.6263, 1.8314, 2.0804, 2.3731, 2.7127, 3.1017, 3.5406, 4.0311, 4.5715, 5.1609, 5.7965, 6.4765, 7.1947, 
    0.8288, 0.8403, 0.8744, 0.9336, 1.0184, 1.1330, 1.2795, 1.4634, 1.6870, 1.9530, 2.2687, 2.6334, 3.0531, 3.5262, 4.0566, 4.6421, 5.2817, 5.9743, 6.7151, 
    0.6050, 0.6146, 0.6428, 0.6919, 0.7641, 0.8618, 0.9882, 1.1489, 1.3468, 1.5874, 1.8751, 2.2136, 2.6077, 3.0602, 3.5745, 4.1501, 4.7873, 5.4856, 6.2417, 
    0.4259, 0.4336, 0.4570, 0.4970, 0.5565, 0.6379, 0.7453, 0.8827, 1.0552, 1.2685, 1.5283, 1.8387, 2.2051, 2.6326, 3.1250, 3.6854, 4.3143, 5.0122, 5.7775, 
    0.2868, 0.2925, 0.3109, 0.3431, 0.3905, 0.4569, 0.5451, 0.6607, 0.8092, 0.9944, 1.2243, 1.5055, 1.8420, 2.2419, 2.7089, 3.2496, 3.8646, 4.5568, 5.3263, 
    0.1822, 0.1868, 0.2005, 0.2249, 0.2620, 0.3139, 0.3849, 0.4801, 0.6034, 0.7625, 0.9629, 1.2123, 1.5180, 1.8871, 2.3268, 2.8430, 3.4408, 4.1229, 4.8923, 
    0.1077, 0.1108, 0.1207, 0.1383, 0.1656, 0.2052, 0.2602, 0.3353, 0.4362, 0.5687, 0.7400, 0.9587, 1.2327, 1.5685, 1.9786, 2.4676, 3.0441, 3.7138, 4.4795, 
    0.0577, 0.0598, 0.0664, 0.0784, 0.0974, 0.1255, 0.1664, 0.2235, 0.3030, 0.4107, 0.5541, 0.7418, 0.9825, 1.2870, 1.6642, 2.1249, 2.6777, 3.3313, 4.0917, 
    0.0271, 0.0284, 0.0324, 0.0398, 0.0520, 0.0709, 0.0992, 0.1408, 0.2008, 0.2856, 0.4023, 0.5597, 0.7686, 1.0392, 1.3837, 1.8140, 2.3419, 2.9776, 3.7313, 
    0.0106, 0.0112, 0.0133, 0.0174, 0.0244, 0.0359, 0.0543, 0.0827, 0.1259, 0.1898, 0.2817, 0.4106, 0.5882, 0.8254, 1.1368, 1.5351, 2.0370, 2.6538, 3.4002, 
    0.0031, 0.0033, 0.0042, 0.0061, 0.0096, 0.0157, 0.0264, 0.0444, 0.0735, 0.1195, 0.1890, 0.2917, 0.4391, 0.6439, 0.9216, 1.2883, 1.7616, 2.3591, 3.0985, 
    0.0005, 0.0006, 0.0009, 0.0015, 0.0028, 0.0056, 0.0110, 0.0211, 0.0393, 0.0702, 0.1207, 0.1996, 0.3189, 0.4925, 0.7364, 1.0704, 1.5153, 2.0931, 2.8253, 
    0.5e-4, 0.5e-4, 0.0001, 0.0002, 0.0005, 0.0014, 0.0036, 0.0086, 0.0187, 0.0380, 0.0726, 0.1310, 0.2244, 0.3679, 0.5798, 0.8811, 1.2966, 1.8531, 2.5787, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0002, 0.0008, 0.0028, 0.0076, 0.0186, 0.0406, 0.0814, 0.1524, 0.2684, 0.4490, 0.7178, 1.1031, 1.6377, 2.3564, 
    5.8149, 5.8480, 5.9370, 6.0783, 6.2609, 6.4819, 6.7335, 7.0096, 7.3075, 7.6221, 7.9459, 8.2807, 8.6192, 8.9605, 9.3018, 9.6406, 9.9749, 10.3026, 10.6225, 
    4.5865, 4.6156, 4.6989, 4.8325, 5.0153, 5.2379, 5.4992, 5.7920, 6.1137, 6.4591, 6.8241, 7.2053, 7.5988, 8.0017, 8.4103, 8.8225, 9.2345, 9.6435, 10.0474, 
    3.6431, 3.6692, 3.7438, 3.8671, 4.0385, 4.2519, 4.5081, 4.7999, 5.1261, 5.4823, 5.8672, 6.2754, 6.7039, 7.1477, 7.6076, 8.0757, 8.5502, 9.0277, 9.5041, 
    2.8992, 2.9234, 2.9921, 3.1014, 3.2577, 3.4576, 3.7007, 3.9791, 4.2990, 4.6534, 5.0426, 5.4629, 5.9088, 6.3834, 6.8755, 7.3856, 7.9102, 8.4434, 8.9828, 
    2.3048, 2.3247, 2.3845, 2.4838, 2.6246, 2.8059, 3.0296, 3.2925, 3.5992, 3.9426, 4.3247, 4.7464, 5.2013, 5.6871, 6.2007, 6.7425, 7.3041, 7.8841, 8.4763, 
    1.8201, 1.8390, 1.8899, 1.9786, 2.1029, 2.2667, 2.4711, 2.7134, 2.9994, 3.3290, 3.6972, 4.1094, 4.5606, 5.0502, 5.5773, 6.1373, 6.7269, 7.3428, 7.9797, 
    1.4222, 1.4370, 1.4826, 1.5599, 1.6702, 1.8154, 1.9976, 2.2214, 2.4836, 2.7903, 3.1424, 3.5386, 3.9795, 4.4658, 4.9950, 5.5656, 6.1739, 6.8166, 7.4896, 
    1.0927, 1.1064, 1.1454, 1.2121, 1.3080, 1.4362, 1.5987, 1.7979, 2.0393, 2.3204, 2.6508, 3.0271, 3.4523, 3.9270, 4.4510, 5.0230, 5.6417, 6.3034, 7.0044, 
    0.8228, 0.8348, 0.8679, 0.9242, 1.0073, 1.1178, 1.2613, 1.4392, 1.6540, 1.9130, 2.2159, 2.5686, 2.9720, 3.4303, 3.9427, 4.5097, 5.1309, 5.8030, 6.5243, 
    0.6029, 0.6124, 0.6401, 0.6878, 0.7575, 0.8524, 0.9760, 1.1299, 1.3228, 1.5540, 1.8312, 2.1571, 2.5359, 2.9728, 3.4684, 4.0232, 4.6400, 5.3160, 6.0507, 
    0.4263, 0.4341, 0.4563, 0.4956, 0.5540, 0.6333, 0.7379, 0.8707, 1.0380, 1.2417, 1.4925, 1.7903, 2.1430, 2.5529, 3.0260, 3.5659, 4.1713, 4.8446, 5.5862, 
    0.2885, 0.2946, 0.3127, 0.3435, 0.3904, 0.4554, 0.5416, 0.6535, 0.7973, 0.9755, 1.1970, 1.4665, 1.7887, 2.1707, 2.6175, 3.1350, 3.7251, 4.3913, 5.1343, 
    0.1843, 0.1889, 0.2025, 0.2266, 0.2631, 0.3139, 0.3837, 0.4764, 0.5960, 0.7486, 0.9409, 1.1800, 1.4722, 1.8239, 2.2428, 2.7361, 3.3063, 3.9608, 4.6992, 
    0.1098, 0.1128, 0.1228, 0.1403, 0.1673, 0.2061, 0.2603, 0.3334, 0.4316, 0.5597, 0.7239, 0.9325, 1.1937, 1.5160, 1.9029, 2.3675, 2.9157, 3.5526, 4.2851, 
    0.0592, 0.0614, 0.0680, 0.0799, 0.0989, 0.1270, 0.1672, 0.2234, 0.3007, 0.4048, 0.5423, 0.7217, 0.9512, 1.2390, 1.5969, 2.0313, 2.5538, 3.1723, 3.8959, 
    0.0280, 0.0293, 0.0334, 0.0409, 0.0533, 0.0721, 0.1002, 0.1413, 0.2001, 0.2819, 0.3945, 0.5453, 0.7434, 0.9987, 1.3239, 1.7272, 2.2234, 2.8223, 3.5346, 
    0.0110, 0.0117, 0.0138, 0.0180, 0.0252, 0.0368, 0.0552, 0.0834, 0.1257, 0.1882, 0.2765, 0.4006, 0.5687, 0.7916, 1.0838, 1.4556, 1.9243, 2.5013, 3.2031, 
    0.0032, 0.0035, 0.0044, 0.0064, 0.0099, 0.0162, 0.0270, 0.0448, 0.0738, 0.1186, 0.1858, 0.2845, 0.4238, 0.6160, 0.8753, 1.2165, 1.6556, 2.2115, 2.9020, 
    0.0006, 0.0006, 0.0009, 0.0016, 0.0030, 0.0058, 0.0113, 0.0215, 0.0396, 0.0700, 0.1192, 0.1948, 0.3079, 0.4703, 0.6976, 1.0058, 1.4170, 1.9506, 2.6303, 
    0.5e-4, 0.5e-4, 0.0001, 0.0002, 0.0006, 0.0015, 0.0038, 0.0088, 0.0189, 0.0381, 0.0717, 0.1275, 0.2164, 0.3505, 0.5467, 0.8243, 1.2059, 1.7171, 2.3864, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0002, 0.0009, 0.0028, 0.0078, 0.0186, 0.0401, 0.0794, 0.1466, 0.2553, 0.4216, 0.6682, 1.0205, 1.5087, 2.1677, 
    5.7256, 5.7565, 5.8448, 5.9830, 6.1636, 6.3794, 6.6254, 6.8990, 7.1911, 7.4995, 7.8176, 8.1473, 8.4804, 8.8152, 9.1499, 9.4838, 9.8128, 10.1356, 10.4504, 
    4.5010, 4.5286, 4.6113, 4.7432, 4.9187, 5.1369, 5.3908, 5.6766, 5.9911, 6.3278, 6.6834, 7.0575, 7.4424, 7.8374, 8.2370, 8.6412, 9.0453, 9.4454, 9.8414, 
    3.5666, 3.5925, 3.6649, 3.7865, 3.9509, 4.1587, 4.4070, 4.6910, 5.0069, 5.3544, 5.7281, 6.1248, 6.5420, 6.9754, 7.4226, 7.8784, 8.3417, 8.8078, 9.2736, 
    2.8377, 2.8609, 2.9240, 3.0339, 3.1852, 3.3760, 3.6088, 3.8795, 4.1882, 4.5294, 4.9083, 5.3138, 5.7487, 6.2074, 6.6850, 7.1803, 7.6911, 8.2102, 8.7354, 
    2.2555, 2.2741, 2.3320, 2.4272, 2.5633, 2.7365, 2.9535, 3.2071, 3.5011, 3.8324, 4.1998, 4.6057, 5.0439, 5.5149, 6.0118, 6.5345, 7.0802, 7.6426, 8.2182, 
    1.7835, 1.8002, 1.8501, 1.9346, 2.0544, 2.2112, 2.4058, 2.6409, 2.9149, 3.2285, 3.5833, 3.9801, 4.4133, 4.8836, 5.3920, 5.9312, 6.5020, 7.0979, 7.7153, 
    1.3958, 1.4113, 1.4542, 1.5293, 1.6335, 1.7737, 1.9485, 2.1596, 2.4126, 2.7066, 3.0417, 3.4205, 3.8447, 4.3105, 4.8165, 5.3645, 5.9498, 6.5718, 7.2223, 
    1.0778, 1.0904, 1.1278, 1.1922, 1.2834, 1.4059, 1.5615, 1.7524, 1.9799, 2.2503, 2.5637, 2.9226, 3.3285, 3.7826, 4.2827, 4.8301, 5.4232, 6.0603, 6.7363, 
    0.8153, 0.8260, 0.8574, 0.9118, 0.9912, 1.0976, 1.2334, 1.4025, 1.6071, 1.8541, 2.1435, 2.4777, 2.8611, 3.2955, 3.7826, 4.3231, 4.9180, 5.5629, 6.2566, 
    0.6007, 0.6098, 0.6366, 0.6819, 0.7492, 0.8414, 0.9575, 1.1048, 1.2874, 1.5079, 1.7699, 2.0788, 2.4377, 2.8508, 3.3212, 3.8470, 4.4335, 5.0794, 5.7838, 
    0.4271, 0.4341, 0.4568, 0.4938, 0.5502, 0.6271, 0.7269, 0.8541, 1.0128, 1.2085, 1.4431, 1.7246, 2.0568, 2.4438, 2.8898, 3.3986, 3.9715, 4.6119, 5.3199, 
    0.2912, 0.2967, 0.3149, 0.3451, 0.3904, 0.4528, 0.5354, 0.6432, 0.7802, 0.9496, 1.1563, 1.4102, 1.7135, 2.0722, 2.4923, 2.9780, 3.5330, 4.1625, 4.8682, 
    0.1880, 0.1922, 0.2055, 0.2288, 0.2646, 0.3144, 0.3816, 0.4701, 0.5847, 0.7301, 0.9118, 1.1363, 1.4101, 1.7371, 2.1290, 2.5882, 3.1210, 3.7348, 4.4328, 
    0.1125, 0.1156, 0.1256, 0.1431, 0.1698, 0.2076, 0.2604, 0.3316, 0.4247, 0.5472, 0.7024, 0.8977, 1.1415, 1.4390, 1.8000, 2.2296, 2.7371, 3.3315, 4.0181, 
    0.0613, 0.0634, 0.0702, 0.0821, 0.1012, 0.1292, 0.1684, 0.2232, 0.2975, 0.3973, 0.5272, 0.6952, 0.9084, 1.1739, 1.5030, 1.9032, 2.3840, 2.9560, 3.6282, 
    0.0293, 0.0307, 0.0348, 0.0424, 0.0547, 0.0738, 0.1017, 0.1420, 0.1991, 0.2775, 0.3834, 0.5245, 0.7085, 0.9446, 1.2403, 1.6097, 2.0615, 2.6099, 3.2668, 
    0.0116, 0.0123, 0.0145, 0.0189, 0.0262, 0.0380, 0.0561, 0.0844, 0.1258, 0.1859, 0.2697, 0.3856, 0.5411, 0.7468, 1.0105, 1.3485, 1.7712, 2.2951, 2.9361, 
    0.0034, 0.0037, 0.0047, 0.0067, 0.0104, 0.0169, 0.0279, 0.0457, 0.0742, 0.1172, 0.1818, 0.2740, 0.4033, 0.5782, 0.8130, 1.1191, 1.5135, 2.0117, 2.6370, 
    0.0006, 0.0007, 0.0010, 0.0017, 0.0031, 0.0061, 0.0117, 0.0220, 0.0400, 0.0696, 0.1165, 0.1880, 0.2919, 0.4396, 0.6444, 0.9195, 1.2848, 1.7597, 2.3690, 
    0.5e-4, 0.5e-4, 0.0001, 0.0002, 0.0006, 0.0016, 0.0040, 0.0091, 0.0193, 0.0380, 0.0704, 0.1230, 0.2050, 0.3269, 0.5028, 0.7485, 1.0852, 1.5358, 2.1300, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0002, 0.0009, 0.0030, 0.0079, 0.0187, 0.0395, 0.0767, 0.1389, 0.2373, 0.3859, 0.6030, 0.9111, 1.3381, 1.9174, 
    5.6018, 5.6326, 5.7213, 5.8536, 6.0291, 6.2417, 6.4784, 6.7446, 7.0300, 7.3306, 7.6429, 7.9635, 8.2887, 8.6170, 8.9440, 9.2696, 9.5917, 9.9069, 10.2146, 
    4.3869, 4.4132, 4.4893, 4.6180, 4.7901, 4.9990, 5.2445, 5.5205, 5.8255, 6.1504, 6.4975, 6.8596, 7.2340, 7.6128, 8.0036, 8.3957, 8.7873, 9.1768, 9.5618, 
    3.4660, 3.4893, 3.5609, 3.6745, 3.8350, 4.0333, 4.2688, 4.5419, 4.8455, 5.1786, 5.5394, 5.9206, 6.3250, 6.7431, 7.1732, 7.6146, 8.0619, 8.5126, 8.9635, 
    2.7532, 2.7750, 2.8378, 2.9387, 3.0836, 3.2672, 3.4879, 3.7440, 4.0400, 4.3680, 4.7287, 5.1171, 5.5319, 5.9708, 6.4315, 6.9075, 7.3977, 7.8984, 8.4054, 
    2.1907, 2.2067, 2.2643, 2.3532, 2.4831, 2.6447, 2.8524, 3.0895, 3.3688, 3.6858, 4.0330, 4.4199, 4.8352, 5.2857, 5.7606, 6.2612, 6.7817, 7.3231, 7.8763, 
    1.7352, 1.7512, 1.7976, 1.8784, 1.9899, 2.1393, 2.3234, 2.5451, 2.8018, 3.0988, 3.4329, 3.8087, 4.2179, 4.6661, 5.1466, 5.6610, 6.2058, 6.7757, 7.3677, 
    1.3633, 1.3794, 1.4182, 1.4884, 1.5885, 1.7182, 1.8818, 2.0808, 2.3202, 2.5940, 2.9114, 3.2672, 3.6651, 4.1030, 4.5844, 5.1032, 5.6603, 6.2505, 6.8731, 
    1.0560, 1.0700, 1.1068, 1.1667, 1.2520, 1.3665, 1.5120, 1.6912, 1.9059, 2.1570, 2.4505, 2.7853, 3.1661, 3.5899, 4.0629, 4.5786, 5.1394, 5.7440, 6.3883, 
    0.8045, 0.8152, 0.8459, 0.8986, 0.9722, 1.0721, 1.2004, 1.3570, 1.5481, 1.7780, 2.0434, 2.3588, 2.7168, 3.1202, 3.5791, 4.0857, 4.6429, 5.2538, 5.9113, 
    0.5968, 0.6059, 0.6310, 0.6737, 0.7394, 0.8240, 0.9336, 1.0729, 1.2425, 1.4481, 1.6903, 1.9778, 2.3126, 2.6927, 3.1303, 3.6207, 4.1700, 4.7762, 5.4415, 
    0.4281, 0.4358, 0.4570, 0.4934, 0.5459, 0.6188, 0.7132, 0.8325, 0.9807, 1.1627, 1.3811, 1.6422, 1.9466, 2.3037, 2.7140, 3.1837, 3.7176, 4.3161, 4.9805, 
    0.2941, 0.3003, 0.3170, 0.3465, 0.3911, 0.4482, 0.5292, 0.6308, 0.7577, 0.9166, 1.1078, 1.3412, 1.6190, 1.9485, 2.3307, 2.7784, 3.2906, 3.8727, 4.5311, 
    0.1913, 0.1958, 0.2091, 0.2325, 0.2675, 0.3149, 0.3793, 0.4632, 0.5701, 0.7064, 0.8733, 1.0813, 1.3304, 1.6290, 1.9842, 2.4036, 2.8877, 3.4522, 4.0974, 
    0.1160, 0.1191, 0.1292, 0.1461, 0.1722, 0.2098, 0.2607, 0.3284, 0.4172, 0.5303, 0.6748, 0.8551, 1.0764, 1.3443, 1.6683, 2.0556, 2.5148, 3.0547, 3.6839, 
    0.0639, 0.0663, 0.0727, 0.0849, 0.1039, 0.1312, 0.1695, 0.2224, 0.2935, 0.3875, 0.5080, 0.6612, 0.8538, 1.0920, 1.3874, 1.7441, 2.1713, 2.6861, 3.2954, 
    0.0310, 0.0322, 0.0365, 0.0444, 0.0569, 0.0759, 0.1035, 0.1426, 0.1974, 0.2716, 0.3704, 0.4985, 0.6656, 0.8750, 1.1381, 1.4644, 1.8613, 2.3475, 2.9360, 
    0.0124, 0.0131, 0.0155, 0.0200, 0.0274, 0.0394, 0.0578, 0.0855, 0.1254, 0.1822, 0.2608, 0.3673, 0.5069, 0.6883, 0.9206, 1.2154, 1.5846, 2.0421, 2.6085, 
    0.0037, 0.0040, 0.0051, 0.0072, 0.0111, 0.0177, 0.0288, 0.0468, 0.0745, 0.1163, 0.1763, 0.2611, 0.3766, 0.5319, 0.7368, 1.0004, 1.3376, 1.7693, 2.3143, 
    0.0007, 0.0008, 0.0011, 0.0018, 0.0034, 0.0065, 0.0123, 0.0227, 0.0404, 0.0690, 0.1131, 0.1790, 0.2726, 0.4028, 0.5786, 0.8135, 1.1241, 1.5288, 2.0528, 
    0.5e-4, 0.5e-4, 0.0001, 0.0002, 0.0006, 0.0017, 0.0042, 0.0094, 0.0196, 0.0380, 0.0686, 0.1176, 0.1908, 0.2977, 0.4485, 0.6567, 0.9392, 1.3180, 1.8221, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0002, 0.0010, 0.0031, 0.0082, 0.0188, 0.0387, 0.0733, 0.1291, 0.2153, 0.3420, 0.5241, 0.7797, 1.1330, 1.6192, 
    5.4419, 5.4721, 5.5513, 5.6824, 5.8511, 6.0544, 6.2858, 6.5427, 6.8155, 7.1094, 7.4083, 7.7182, 8.0331, 8.3506, 8.6664, 8.9839, 9.2950, 9.6010, 9.8999, 
    4.2323, 4.2592, 4.3331, 4.4552, 4.6197, 4.8180, 5.0554, 5.3184, 5.6060, 5.9182, 6.2501, 6.5959, 6.9548, 7.3204, 7.6934, 8.0701, 8.4473, 8.8223, 9.1933, 
    3.3354, 3.3558, 3.4219, 3.5323, 3.6862, 3.8728, 4.0938, 4.3550, 4.6391, 4.9561, 5.2969, 5.6604, 6.0394, 6.4374, 6.8500, 7.2690, 7.6974, 8.1282, 8.5599, 
    2.6478, 2.6643, 2.7227, 2.8204, 2.9523, 3.1259, 3.3328, 3.5766, 3.8540, 4.1602, 4.4998, 4.8644, 5.2584, 5.6689, 6.1026, 6.5550, 7.0221, 7.4980, 7.9807, 
    2.1082, 2.1249, 2.1770, 2.2588, 2.3777, 2.5338, 2.7212, 2.9452, 3.2039, 3.4966, 3.8278, 4.1836, 4.5730, 4.9941, 5.4413, 5.9103, 6.4053, 6.9160, 7.4410, 
    1.6760, 1.6912, 1.7373, 1.8069, 1.9132, 2.0472, 2.2186, 2.4232, 2.6619, 2.9340, 3.2440, 3.5912, 3.9754, 4.3883, 4.8405, 5.3191, 5.8329, 6.3697, 6.9293, 
    1.3229, 1.3346, 1.3737, 1.4374, 1.5300, 1.6525, 1.8012, 1.9842, 2.2016, 2.4574, 2.7460, 3.0733, 3.4415, 3.8472, 4.2916, 4.7757, 5.2977, 5.8503, 6.4368, 
    1.0336, 1.0445, 1.0769, 1.1322, 1.2110, 1.3152, 1.4501, 1.6170, 1.8121, 2.0404, 2.3116, 2.6186, 2.9636, 3.3553, 3.7910, 4.2688, 4.7887, 5.3525, 5.9573, 
    0.7931, 0.7997, 0.8306, 0.8768, 0.9484, 1.0379, 1.1550, 1.3008, 1.4762, 1.6840, 1.9282, 2.2149, 2.5405, 2.9115, 3.3272, 3.7912, 4.3075, 4.8718, 5.4871, 
    0.5935, 0.5993, 0.6253, 0.6653, 0.7238, 0.8039, 0.9050, 1.0327, 1.1891, 1.3734, 1.5960, 1.8544, 2.1538, 2.5017, 2.8979, 3.3432, 3.8471, 4.4075, 5.0247, 
    0.4296, 0.4360, 0.4562, 0.4912, 0.5412, 0.6091, 0.6965, 0.8051, 0.9416, 1.1062, 1.3053, 1.5386, 1.8139, 2.1335, 2.5055, 2.9255, 3.4107, 3.9575, 4.5706, 
    0.2986, 0.3031, 0.3206, 0.3482, 0.3898, 0.4451, 0.5197, 0.6150, 0.7319, 0.8736, 1.0499, 1.2592, 1.5056, 1.8001, 2.1397, 2.5407, 2.9986, 3.5258, 4.1273, 
    0.1962, 0.2009, 0.2134, 0.2364, 0.2695, 0.3143, 0.3759, 0.4550, 0.5532, 0.6766, 0.8292, 1.0136, 1.2354, 1.4980, 1.8119, 2.1799, 2.6118, 3.1144, 3.6989, 
    0.1203, 0.1234, 0.1333, 0.1502, 0.1755, 0.2118, 0.2607, 0.3239, 0.4071, 0.5120, 0.6428, 0.8023, 0.9966, 1.2323, 1.5147, 1.8513, 2.2536, 2.7288, 3.2903, 
    0.0671, 0.0692, 0.0761, 0.0884, 0.1071, 0.1342, 0.1713, 0.2218, 0.2880, 0.3741, 0.4836, 0.6213, 0.7909, 0.9979, 1.2499, 1.5564, 1.9246, 2.3705, 2.9068, 
    0.0330, 0.0342, 0.0386, 0.0465, 0.0593, 0.0782, 0.1054, 0.1432, 0.1956, 0.2645, 0.3544, 0.4678, 0.6139, 0.7961, 1.0174, 1.2933, 1.6299, 2.0439, 2.5532, 
    0.0133, 0.0141, 0.0165, 0.0212, 0.0289, 0.0410, 0.0594, 0.0866, 0.1251, 0.1785, 0.2505, 0.3460, 0.4684, 0.6238, 0.8175, 1.0636, 1.3689, 1.7519, 2.2329, 
    0.0040, 0.0044, 0.0055, 0.0078, 0.0118, 0.0187, 0.0299, 0.0477, 0.0749, 0.1145, 0.1700, 0.2458, 0.3465, 0.4771, 0.6469, 0.8639, 1.1386, 1.4932, 1.9478, 
    0.0007, 0.0008, 0.0012, 0.0020, 0.0036, 0.0069, 0.0129, 0.0234, 0.0409, 0.0684, 0.1094, 0.1681, 0.2502, 0.3595, 0.5041, 0.6943, 0.9433, 1.2682, 1.6974, 
    0.5e-4, 0.0001, 0.0001, 0.0003, 0.0007, 0.0018, 0.0044, 0.0098, 0.0200, 0.0378, 0.0666, 0.1106, 0.1743, 0.2645, 0.3872, 0.5532, 0.7749, 1.0744, 1.4796, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0003, 0.0011, 0.0033, 0.0084, 0.0187, 0.0376, 0.0691, 0.1177, 0.1901, 0.2923, 0.4351, 0.6336, 0.9082, 1.2911, 
    5.2234, 5.2494, 5.3274, 5.4511, 5.6132, 5.8071, 6.0273, 6.2716, 6.5294, 6.8110, 7.0992, 7.3915, 7.6932, 7.9935, 8.3001, 8.6019, 8.8986, 9.1925, 9.4792, 
    4.0349, 4.0594, 4.1291, 4.2424, 4.3960, 4.5854, 4.8015, 5.0503, 5.3201, 5.6164, 5.9294, 6.2537, 6.5896, 6.9353, 7.2880, 7.6438, 8.0010, 8.3575, 8.7100, 
    3.1660, 3.1859, 3.2511, 3.3518, 3.4856, 3.6633, 3.8685, 4.1019, 4.3703, 4.6641, 4.9812, 5.3177, 5.6751, 6.0468, 6.4314, 6.8262, 7.2256, 7.6326, 8.0396, 
    2.5121, 2.5311, 2.5828, 2.6720, 2.7950, 2.9479, 3.1410, 3.3634, 3.6154, 3.8949, 4.2070, 4.5439, 4.9067, 5.2871, 5.6918, 6.1105, 6.5446, 6.9887, 7.4418, 
    2.0067, 2.0206, 2.0677, 2.1445, 2.2515, 2.3875, 2.5607, 2.7604, 2.9970, 3.2683, 3.5596, 3.8883, 4.2451, 4.6300, 5.0405, 5.4770, 5.9324, 6.4067, 6.8968, 
    1.6037, 1.6148, 1.6558, 1.7208, 1.8140, 1.9387, 2.0896, 2.2732, 2.4895, 2.7358, 3.0124, 3.3262, 3.6719, 4.0515, 4.4614, 4.9019, 5.3729, 5.8680, 6.3886, 
    1.2725, 1.2862, 1.3174, 1.3778, 1.4592, 1.5664, 1.7043, 1.8668, 2.0610, 2.2873, 2.5490, 2.8414, 3.1672, 3.5387, 3.9392, 4.3772, 4.8543, 5.3633, 5.9055, 
    1.0017, 1.0115, 1.0418, 1.0929, 1.1659, 1.2604, 1.3789, 1.5237, 1.6994, 1.9047, 2.1413, 2.4156, 2.7250, 3.0719, 3.4609, 3.8933, 4.3672, 4.8809, 5.4387, 
    0.7778, 0.7840, 0.8096, 0.8543, 0.9161, 0.9990, 1.1049, 1.2327, 1.3895, 1.5759, 1.7908, 2.0398, 2.3310, 2.6551, 3.0273, 3.4420, 3.9064, 4.4191, 4.9826, 
    0.5883, 0.5936, 0.6181, 0.6557, 0.7079, 0.7833, 0.8723, 0.9859, 1.1248, 1.2897, 1.4817, 1.7106, 1.9729, 2.2776, 2.6262, 3.0229, 3.4682, 3.9718, 4.5344, 
    0.4316, 0.4362, 0.4552, 0.4887, 0.5337, 0.5964, 0.6762, 0.7750, 0.8941, 1.0410, 1.2137, 1.4190, 1.6586, 1.9357, 2.2549, 2.6282, 3.0539, 3.5409, 4.0938, 
    0.3028, 0.3076, 0.3237, 0.3512, 0.3894, 0.4419, 0.5102, 0.5944, 0.7000, 0.8273, 0.9799, 1.1623, 1.3749, 1.6271, 1.9213, 2.2620, 2.6637, 3.1262, 3.6629, 
    0.2014, 0.2065, 0.2179, 0.2395, 0.2722, 0.3162, 0.3723, 0.4434, 0.5341, 0.6444, 0.7773, 0.9375, 1.1259, 1.3500, 1.6144, 1.9254, 2.2950, 2.7319, 3.2458, 
    0.1253, 0.1282, 0.1380, 0.1547, 0.1795, 0.2145, 0.2604, 0.3207, 0.3950, 0.4894, 0.6037, 0.7420, 0.9076, 1.1039, 1.3383, 1.6206, 1.9577, 2.3622, 2.8479, 
    0.0711, 0.0731, 0.0800, 0.0917, 0.1107, 0.1370, 0.1727, 0.2211, 0.2822, 0.3597, 0.4566, 0.5742, 0.7176, 0.8886, 1.0965, 1.3467, 1.6502, 2.0200, 2.4751, 
    0.0351, 0.0366, 0.0410, 0.0492, 0.0619, 0.0809, 0.1075, 0.1441, 0.1927, 0.2556, 0.3351, 0.4345, 0.5577, 0.7048, 0.8848, 1.1037, 1.3748, 1.7113, 2.1330, 
    0.0145, 0.0153, 0.0178, 0.0227, 0.0305, 0.0431, 0.0613, 0.0878, 0.1241, 0.1736, 0.2377, 0.3203, 0.4222, 0.5484, 0.7027, 0.8941, 1.1338, 1.4372, 1.8258, 
    0.0044, 0.0048, 0.0060, 0.0084, 0.0126, 0.0197, 0.0311, 0.0487, 0.0748, 0.1119, 0.1620, 0.2284, 0.3120, 0.4180, 0.5497, 0.7151, 0.9255, 1.1971, 1.5556, 
    0.0008, 0.0009, 0.0013, 0.0022, 0.0039, 0.0074, 0.0135, 0.0242, 0.0413, 0.0675, 0.1049, 0.1560, 0.2248, 0.3124, 0.4242, 0.5658, 0.7505, 0.9934, 1.3223, 
    0.5e-4, 0.0001, 0.0001, 0.0003, 0.0008, 0.0020, 0.0047, 0.0102, 0.0204, 0.0373, 0.0637, 0.1028, 0.1567, 0.2280, 0.3214, 0.4432, 0.6039, 0.8213, 1.1233, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0001, 0.0003, 0.0011, 0.0034, 0.0086, 0.0187, 0.0362, 0.0641, 0.1049, 0.1621, 0.2395, 0.3431, 0.4830, 0.6768, 0.9547, 
    4.9243, 4.9516, 5.0216, 5.1402, 5.2877, 5.4666, 5.6702, 5.8958, 6.1361, 6.3968, 6.6666, 6.9420, 7.2216, 7.5053, 7.7900, 8.0731, 8.3533, 8.6287, 8.8986, 
    3.7674, 3.7915, 3.8534, 3.9576, 4.0974, 4.2661, 4.4673, 4.6927, 4.9412, 5.2073, 5.4890, 5.7913, 6.1017, 6.4200, 6.7449, 7.0725, 7.4040, 7.7339, 8.0617, 
    2.9525, 2.9652, 3.0206, 3.1117, 3.2339, 3.3896, 3.5698, 3.7870, 4.0244, 4.2887, 4.5730, 4.8792, 5.1991, 5.5370, 5.8870, 6.2427, 6.6114, 6.9839, 7.3593, 
    2.3424, 2.3576, 2.4062, 2.4842, 2.5957, 2.7267, 2.8937, 3.0859, 3.3114, 3.5599, 3.8394, 4.1358, 4.4599, 4.8016, 5.1626, 5.5407, 5.9339, 6.3395, 6.7537, 
    1.8823, 1.8925, 1.9310, 2.0003, 2.0881, 2.2142, 2.3658, 2.5400, 2.7367, 2.9726, 3.2322, 3.5235, 3.8320, 4.1763, 4.5391, 4.9303, 5.3399, 5.7698, 6.2165, 
    1.5134, 1.5223, 1.5594, 1.6139, 1.6999, 1.8052, 1.9333, 2.0886, 2.2756, 2.4923, 2.7311, 3.0022, 3.3062, 3.6397, 3.9992, 4.3890, 4.8063, 5.2548, 5.7260, 
    1.2156, 1.2276, 1.2532, 1.3075, 1.3786, 1.4685, 1.5867, 1.7275, 1.8940, 2.0861, 2.3070, 2.5620, 2.8444, 3.1598, 3.5136, 3.8994, 4.3218, 4.7763, 5.2661, 
    0.9667, 0.9763, 1.0009, 1.0492, 1.1085, 1.1889, 1.2938, 1.4192, 1.5674, 1.7444, 1.9437, 2.1800, 2.4421, 2.7402, 3.0760, 3.4525, 3.8669, 4.3248, 4.8251, 
    0.7586, 0.7660, 0.7896, 0.8282, 0.8831, 0.9582, 1.0462, 1.1583, 1.2910, 1.4466, 1.6313, 1.8395, 2.0857, 2.3612, 2.6781, 3.0342, 3.4404, 3.8916, 4.3953, 
    0.5805, 0.5870, 0.6092, 0.6419, 0.6911, 0.7577, 0.8359, 0.9308, 1.0524, 1.1899, 1.3577, 1.5467, 1.7633, 2.0217, 2.3135, 2.6498, 3.0351, 3.4730, 3.9724, 
    0.4324, 0.4392, 0.4558, 0.4849, 0.5251, 0.5818, 0.6545, 0.7389, 0.8441, 0.9672, 1.1129, 1.2819, 1.4805, 1.7125, 1.9754, 2.2891, 2.6515, 3.0707, 3.5556, 
    0.3080, 0.3126, 0.3276, 0.3525, 0.3899, 0.4369, 0.4983, 0.5736, 0.6666, 0.7758, 0.9024, 1.0511, 1.2280, 1.4321, 1.6752, 1.9546, 2.2893, 2.6814, 3.1467, 
    0.2077, 0.2126, 0.2236, 0.2456, 0.2761, 0.3154, 0.3676, 0.4325, 0.5122, 0.6074, 0.7213, 0.8486, 1.0054, 1.1864, 1.3978, 1.6499, 1.9505, 2.3124, 2.7499, 
    0.1308, 0.1339, 0.1430, 0.1600, 0.1837, 0.2174, 0.2601, 0.3146, 0.3820, 0.4632, 0.5609, 0.6737, 0.8087, 0.9661, 1.1505, 1.3712, 1.6392, 1.9660, 2.3713, 
    0.0749, 0.0771, 0.0843, 0.0963, 0.1143, 0.1396, 0.1747, 0.2190, 0.2752, 0.3450, 0.4259, 0.5242, 0.6381, 0.7744, 0.9319, 1.1232, 1.3557, 1.6479, 2.0176, 
    0.0376, 0.0391, 0.0438, 0.0521, 0.0649, 0.0841, 0.1101, 0.1441, 0.1895, 0.2463, 0.3148, 0.3967, 0.4952, 0.6090, 0.7429, 0.9073, 1.1065, 1.3635, 1.6950, 
    0.0156, 0.0165, 0.0192, 0.0242, 0.0325, 0.0449, 0.0633, 0.0888, 0.1234, 0.1682, 0.2247, 0.2920, 0.3736, 0.4701, 0.5839, 0.7191, 0.8908, 1.1128, 1.4086, 
    0.0049, 0.0053, 0.0065, 0.0091, 0.0135, 0.0209, 0.0325, 0.0502, 0.0749, 0.1088, 0.1533, 0.2082, 0.2751, 0.3560, 0.4500, 0.5637, 0.7084, 0.8992, 1.1609, 
    0.0009, 0.0010, 0.0014, 0.0024, 0.0043, 0.0079, 0.0144, 0.0250, 0.0417, 0.0657, 0.0998, 0.1433, 0.1969, 0.2626, 0.3409, 0.4366, 0.5575, 0.7207, 0.9517, 
    0.5e-4, 0.0001, 0.0001, 0.0003, 0.0008, 0.0021, 0.0050, 0.0106, 0.0207, 0.0367, 0.0605, 0.0937, 0.1363, 0.1896, 0.2536, 0.3334, 0.4354, 0.5749, 0.7782, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0001, 0.0003, 0.0012, 0.0036, 0.0088, 0.0186, 0.0344, 0.0584, 0.0912, 0.1331, 0.1858, 0.2518, 0.3373, 0.4562, 0.6358, 
    4.4797, 4.4981, 4.5643, 4.6621, 4.7919, 4.9504, 5.1322, 5.3306, 5.5495, 5.7775, 6.0146, 6.2615, 6.5107, 6.7659, 7.0214, 7.2752, 7.5272, 7.7766, 8.0205, 
    3.3930, 3.4123, 3.4700, 3.5547, 3.6663, 3.8158, 3.9813, 4.1803, 4.3910, 4.6205, 4.8666, 5.1277, 5.3964, 5.6750, 5.9595, 6.2491, 6.5420, 6.8344, 7.1269, 
    2.6551, 2.6708, 2.7179, 2.7911, 2.8903, 3.0141, 3.1669, 3.3508, 3.5448, 3.7723, 4.0076, 4.2699, 4.5410, 4.8316, 5.1317, 5.4442, 5.7615, 6.0885, 6.4202, 
    2.1214, 2.1316, 2.1712, 2.2314, 2.3184, 2.4314, 2.5672, 2.7302, 2.9139, 3.1146, 3.3454, 3.5917, 3.8660, 4.1517, 4.4625, 4.7836, 5.1235, 5.4760, 5.8400, 
    1.7195, 1.7340, 1.7685, 1.8157, 1.8930, 1.9885, 2.1060, 2.2505, 2.4174, 2.6061, 2.8149, 3.0506, 3.3120, 3.5973, 3.9005, 4.2310, 4.5817, 4.9535, 5.3442, 
    1.4063, 1.4143, 1.4423, 1.4865, 1.5547, 1.6381, 1.7439, 1.8718, 2.0221, 2.1926, 2.3848, 2.6043, 2.8496, 3.1193, 3.4222, 3.7505, 4.1082, 4.4911, 4.9025, 
    1.1471, 1.1545, 1.1792, 1.2212, 1.2827, 1.3549, 1.4473, 1.5600, 1.6924, 1.8474, 2.0244, 2.2227, 2.4532, 2.7118, 3.0013, 3.3197, 3.6792, 4.0674, 4.4937, 
    0.9283, 0.9364, 0.9577, 0.9933, 1.0489, 1.1096, 1.1966, 1.2980, 1.4148, 1.5521, 1.7155, 1.9016, 2.1063, 2.3476, 2.6212, 2.9302, 3.2767, 3.6681, 4.1029, 
    0.7389, 0.7474, 0.7659, 0.7968, 0.8432, 0.9031, 0.9804, 1.0689, 1.1771, 1.3006, 1.4439, 1.6119, 1.8058, 2.0212, 2.2773, 2.5708, 2.9022, 3.2865, 3.7206, 
    0.5759, 0.5792, 0.6004, 0.6295, 0.6721, 0.7229, 0.7914, 0.8732, 0.9682, 1.0766, 1.2099, 1.3556, 1.5306, 1.7280, 1.9609, 2.2322, 2.5475, 2.9149, 3.3418, 
    0.4357, 0.4392, 0.4549, 0.4816, 0.5182, 0.5661, 0.6258, 0.7006, 0.7855, 0.8868, 0.9995, 1.1327, 1.2824, 1.4654, 1.6730, 1.9169, 2.2081, 2.5545, 2.9652, 
    0.3141, 0.3175, 0.3319, 0.3544, 0.3890, 0.4325, 0.4840, 0.5498, 0.6246, 0.7157, 0.8164, 0.9335, 1.0664, 1.2255, 1.4052, 1.6253, 1.8877, 2.2064, 2.5929, 
    0.2147, 0.2192, 0.2309, 0.2497, 0.2778, 0.3157, 0.3627, 0.4197, 0.4873, 0.5662, 0.6563, 0.7553, 0.8745, 1.0093, 1.1674, 1.3553, 1.5856, 1.8723, 2.2298, 
    0.1364, 0.1393, 0.1485, 0.1656, 0.1884, 0.2190, 0.2593, 0.3092, 0.3678, 0.4368, 0.5133, 0.6042, 0.7042, 0.8184, 0.9520, 1.1135, 1.3100, 1.5608, 1.8826, 
    0.0792, 0.0815, 0.0886, 0.1008, 0.1187, 0.1434, 0.1767, 0.2168, 0.2670, 0.3253, 0.3940, 0.4729, 0.5561, 0.6520, 0.7643, 0.8966, 1.0614, 1.2755, 1.5590, 
    0.0403, 0.0420, 0.0466, 0.0550, 0.0681, 0.0866, 0.1116, 0.1445, 0.1855, 0.2352, 0.2916, 0.3555, 0.4291, 0.5076, 0.6009, 0.7087, 0.8436, 1.0218, 1.2663, 
    0.0171, 0.0179, 0.0208, 0.0259, 0.0343, 0.0470, 0.0651, 0.0899, 0.1216, 0.1616, 0.2081, 0.2626, 0.3234, 0.3889, 0.4622, 0.5486, 0.6566, 0.8030, 1.0102, 
    0.0053, 0.0058, 0.0071, 0.0098, 0.0145, 0.0221, 0.0337, 0.0509, 0.0743, 0.1054, 0.1429, 0.1875, 0.2371, 0.2909, 0.3505, 0.4180, 0.5036, 0.6209, 0.7935, 
    0.0010, 0.0011, 0.0016, 0.0026, 0.0046, 0.0084, 0.0150, 0.0256, 0.0417, 0.0641, 0.0928, 0.1284, 0.1685, 0.2122, 0.2605, 0.3139, 0.3797, 0.4734, 0.6162, 
    0.0001, 0.0001, 0.0001, 0.0004, 0.0009, 0.0023, 0.0053, 0.0110, 0.0208, 0.0362, 0.0569, 0.0839, 0.1161, 0.1509, 0.1896, 0.2317, 0.2837, 0.3572, 0.4747, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0001, 0.0004, 0.0013, 0.0037, 0.0089, 0.0180, 0.0323, 0.0521, 0.0766, 0.1045, 0.1351, 0.1685, 0.2093, 0.2674, 0.3640, 
    3.4656, 3.4820, 3.5231, 3.5945, 3.6751, 3.7853, 3.9055, 4.0448, 4.1940, 4.3527, 4.5287, 4.6997, 4.8830, 5.0676, 5.2530, 5.4418, 5.6316, 5.8192, 6.0053, 
    2.6749, 2.6837, 2.7182, 2.7748, 2.8437, 2.9385, 3.0490, 3.1772, 3.3147, 3.4696, 3.6420, 3.8160, 4.0060, 4.2027, 4.4054, 4.6153, 4.8315, 5.0485, 5.2706, 
    2.1589, 2.1670, 2.1914, 2.2398, 2.3006, 2.3780, 2.4785, 2.5943, 2.7246, 2.8686, 3.0306, 3.2076, 3.3955, 3.5929, 3.8094, 4.0354, 4.2703, 4.5170, 4.7712, 
    1.7878, 1.7983, 1.8225, 1.8609, 1.9166, 1.9905, 2.0772, 2.1736, 2.2954, 2.4257, 2.5821, 2.7475, 2.9317, 3.1352, 3.3508, 3.5905, 3.8419, 4.1103, 4.3940, 
    1.5064, 1.5097, 1.5311, 1.5693, 1.6133, 1.6793, 1.7592, 1.8487, 1.9546, 2.0807, 2.2201, 2.3795, 2.5555, 2.7579, 2.9742, 3.2196, 3.4828, 3.7704, 4.0789, 
    1.2682, 1.2747, 1.2927, 1.3273, 1.3699, 1.4257, 1.4994, 1.5830, 1.6806, 1.7974, 1.9219, 2.0751, 2.2414, 2.4351, 2.6536, 2.8913, 3.1615, 3.4611, 3.7924, 
    1.0640, 1.0685, 1.0885, 1.1171, 1.1567, 1.2075, 1.2790, 1.3557, 1.4414, 1.5494, 1.6708, 1.8080, 1.9664, 2.1471, 2.3506, 2.5914, 2.8578, 3.1683, 3.5151, 
    0.8792, 0.8851, 0.9010, 0.9297, 0.9727, 1.0213, 1.0799, 1.1550, 1.2325, 1.3302, 1.4378, 1.5624, 1.7102, 1.8817, 2.0776, 2.3077, 2.5739, 2.8814, 3.2355, 
    0.7152, 0.7225, 0.7382, 0.7617, 0.8030, 0.8463, 0.9084, 0.9730, 1.0480, 1.1349, 1.2364, 1.3507, 1.4842, 1.6350, 1.8193, 2.0335, 2.2904, 2.5915, 2.9477, 
    0.5687, 0.5725, 0.5877, 0.6110, 0.6481, 0.6903, 0.7460, 0.8089, 0.8780, 0.9574, 1.0479, 1.1513, 1.2719, 1.4117, 1.5742, 1.7739, 2.0124, 2.3019, 2.6495, 
    0.4363, 0.4391, 0.4551, 0.4761, 0.5102, 0.5518, 0.5995, 0.6575, 0.7223, 0.7965, 0.8784, 0.9713, 1.0795, 1.1998, 1.3438, 1.5245, 1.7394, 2.0090, 2.3423, 
    0.3192, 0.3231, 0.3368, 0.3574, 0.3862, 0.4239, 0.4704, 0.5245, 0.5825, 0.6527, 0.7233, 0.8095, 0.9022, 1.0058, 1.1322, 1.2859, 1.4786, 1.7222, 2.0305, 
    0.2222, 0.2257, 0.2359, 0.2541, 0.2797, 0.3148, 0.3547, 0.4042, 0.4589, 0.5203, 0.5869, 0.6596, 0.7415, 0.8302, 0.9348, 1.0659, 1.2292, 1.4413, 1.7207, 
    0.1433, 0.1463, 0.1548, 0.1709, 0.1929, 0.2215, 0.2577, 0.3003, 0.3488, 0.4049, 0.4648, 0.5290, 0.5970, 0.6727, 0.7582, 0.8644, 0.9973, 1.1768, 1.4214, 
    0.0838, 0.0862, 0.0932, 0.1053, 0.1234, 0.1467, 0.1776, 0.2132, 0.2581, 0.3046, 0.3581, 0.4118, 0.4719, 0.5315, 0.6014, 0.6831, 0.7882, 0.9350, 1.1418, 
    0.0432, 0.0449, 0.0496, 0.0580, 0.0713, 0.0897, 0.1142, 0.1439, 0.1795, 0.2224, 0.2672, 0.3144, 0.3622, 0.4113, 0.4646, 0.5281, 0.6077, 0.7209, 0.8904, 
    0.0185, 0.0194, 0.0224, 0.0279, 0.0364, 0.0492, 0.0666, 0.0899, 0.1193, 0.1541, 0.1919, 0.2310, 0.2727, 0.3117, 0.3526, 0.3974, 0.4546, 0.5402, 0.6739, 
    0.0059, 0.0063, 0.0078, 0.0106, 0.0155, 0.0233, 0.0350, 0.0513, 0.0735, 0.1006, 0.1317, 0.1652, 0.1978, 0.2297, 0.2603, 0.2917, 0.3318, 0.3928, 0.4957, 
    0.0011, 0.0013, 0.0018, 0.0029, 0.0050, 0.0090, 0.0157, 0.0263, 0.0413, 0.0615, 0.0856, 0.1125, 0.1401, 0.1648, 0.1881, 0.2103, 0.2365, 0.2787, 0.3557, 
    0.0001, 0.0001, 0.0002, 0.0004, 0.0010, 0.0025, 0.0056, 0.0113, 0.0208, 0.0344, 0.0524, 0.0736, 0.0950, 0.1153, 0.1322, 0.1479, 0.1644, 0.1934, 0.2501, 
    0.5e-4, 0.5e-4, 0.5e-4, 0.5e-4, 0.0001, 0.0004, 0.0014, 0.0039, 0.0089, 0.0175, 0.0298, 0.0452, 0.0620, 0.0779, 0.0911, 0.1019, 0.1130, 0.1317, 0.1730
    };

    // Trilinear interpolation.
    const float g = std::abs(_g) * (gNum-1);
    const float f = _f * (fNum-1);
    const float thetaabs = std::min( std::abs(_cos_wnwi), 1.0f );
    const float thetadeg = std::acos( thetaabs ) * (180.0f / F_PI);
    const float theta = (thetadeg / 90.0f) * (thetaNum-1);

    assert(0.0f <= g && g <= gNum);
    assert(0.0f <= f && f <= fNum);
    assert(0.0f <= theta && theta <= thetaNum);

    const int gi = std::floor(g);
    const int fi = std::floor(f);
    const int thetai = std::floor(theta);

    assert(0 <= gi && gi <= gNum);
    assert(0 <= fi && fi <= fNum);
    assert(0 <= thetai && thetai <= thetaNum);

    const float gf = g - gi;
    const float ff = f - fi;
    const float thetaf = theta - thetai;
    const float omgf = 1.0f - gf;
    const float omff = 1.0f - ff;
    const float omthetaf = 1.0f - thetaf;

    // Table indices.
    const int i000 = gi*fNum*thetaNum + fi*thetaNum + thetai;
    const int i001 = gi*fNum*thetaNum + fi*thetaNum + thetai+1;
    const int i010 = gi*fNum*thetaNum + (fi+1)*thetaNum + thetai;
    const int i011 = gi*fNum*thetaNum + (fi+1)*thetaNum + thetai+1;
    const int i100 = (gi+1)*fNum*thetaNum + fi*thetaNum + thetai;
    const int i101 = (gi+1)*fNum*thetaNum + fi*thetaNum + thetai+1;
    const int i110 = (gi+1)*fNum*thetaNum + (fi+1)*thetaNum + thetai;
    const int i111 = (gi+1)*fNum*thetaNum + (fi+1)*thetaNum + thetai+1;

    // Interpolation weights.
    const float w000 = omgf * omff * omthetaf;
    const float w001 = omgf * omff * thetaf;
    const float w010 = omgf * ff * omthetaf;
    const float w011 = omgf * ff * thetaf;
    const float w100 = gf * omff * omthetaf;
    const float w101 = gf * omff * thetaf;
    const float w110 = gf * ff * omthetaf;
    const float w111 = gf * ff * thetaf;

    const float integral =
                  w000 * IntegralTable[i000] + w001 * IntegralTable[i001]
                + w010 * IntegralTable[i010] + w011 * IntegralTable[i011]
                + w100 * IntegralTable[i100] + w101 * IntegralTable[i101]
                + w110 * IntegralTable[i110] + w111 * IntegralTable[i111];

    return 1.0f / integral;
}

PRMAN_INLINE
void PraterFuzzPdf
(
    const float  g, // -1 < g < +1 : Direction
    const float  f, //  0 ≤ f ≤ 1  : 1-Dispersion
    const float  cos_theta, // Θ = wi ∠ wo
    const float  cos_wnwi,
    const float  cos_wnwo,
    // Results:
    float&  fPdf,
    float&  rPdf,
    float&  W
)
{
    W = PraterFuzzResponse( g, f, cos_theta, cos_wnwi, cos_wnwo ) * PraterFuzzNormalize( g, f, cos_wnwi );
    
    // Volume scattering, so we don't scale by projected solid angle.
    // fPdf = W * cos_wgwi;
    // rPdf = W * cos_wgwo;
    rPdf = fPdf = W;
}

PRMAN_INLINE
void PraterFuzz
(
    const float  g,
    const float  f,
    const float  cos_theta,
    const float  cos_wnwi,
    const float  cos_wnwo,
    const RtColorRGB  Cs,
    // Results:
    float&  fPdf,
    float&  rPdf,
    RtColorRGB& Cr
)
{
    float  W;
    PraterFuzzPdf( g, f, cos_theta, cos_wnwi, cos_wnwo, fPdf, rPdf, W );
    Cr = Cs * W;
}

PRMAN_INLINE
bool Evaluate
(
    const float  g,
    const float  f,
    const RtNormal3  wg,
    const RtVector3  wn,
    const RtVector3  wo,
    const RtVector3  wi,
    const RtColorRGB Cs,
    // Results:
    float&  fPdf,
    float&  rPdf,
    RtColorRGB& Cr
)
{
    // Test the observer and incident visibility.
    if( wg.Dot(wo) < 0.00001f ) return false;
    if( wg.Dot(wi) < 0.00001f ) return false;

    const float  cos_theta = wi.Dot(wo);
    const float  cos_wnwi = wn.Dot(wi);
    const float  cos_wnwo = wn.Dot(wo);

    PraterFuzz( g, f, cos_theta, cos_wnwi, cos_wnwo, Cs, fPdf, rPdf, Cr );
    return true;
}

PRMAN_INLINE
bool Generate
(
    const float  g,
    const float  f,
    const RtNormal3  wg,
    const RtVector3  wn,
    const RtVector3  wo,
    const RtFloat2   xi,
    const RtColorRGB Cs,
    // Results:
    RtVector3&  wi,
    float&  fPdf,
    float&  rPdf,
    RtColorRGB& Cr
)
{
    // Test the observer visibility.
    if( wg.Dot(wo) < 0.00001f ) return false;

    // Generate an incident sample direction (wi).
    // Stub-in isotropic (uniform above wg) samples for now.
    RtVector3  wt, wb;
    wg.CreateOrthonormalBasis( wt, wb );

    float  dummy;
    const RtFloat2  newXi = RtFloat2( xi[0], xi[1]*xi[1] ); // dipole lobe distribution.
    RixUniformDirectionalDistribution( newXi, wg, wt, wb, wi, dummy );

    // Test the incident sample visibility: reject those below the horizon.
    // if( wg.Dot(wi) < 0.00001f ) return false;

    const float  cos_theta = wi.Dot(wo);
    const float  cos_wnwi = wn.Dot(wi);
    const float  cos_wnwo = wn.Dot(wo);

    PraterFuzz( g, f, cos_theta, cos_wnwi, cos_wnwo, Cs, fPdf, rPdf, Cr );
    return true;
}


/*
================================================================
GenerateSample() provides the integrator with a shading context
set of samples generated from this bxdf's response lobe(s).
================================================================
*/
void GenerateSample
(
    RixBXTransportTrait     transportTrait, // Direct, indirect, or both bit field.
    const RixBXLobeTraits*  lobesWanted, // by the integrator, per shading context point.
    RixRNG*                 rixRng, // handle to the random number generator.
    // Generated results:
    RixBXLobeSampled*       lobeGenerated, // which lobe type was generated.
    RtVector3*              wi, // incoming sample direction per shading context point.
    RixBXLobeWeights&       lobeWeights, // response weights.
    float*                  fPdf, // forward pdf.
    float*                  rPdf, // reverse pdf.
    RtColorRGB*             compTrans // compositing transparency (PRMan "Oi")?
)
{
    RtFloat2*  xi = static_cast< RtFloat2* >( RixAlloca( numPts*sizeof(RtFloat2) ));
    rixRng->DrawSamples2D( xi );

    const RixBXLobeTraits  bxdfLobes = GetAllLobeTraits();

    RtColorRGB*  PraterFuzzWeight = NULL;

    for( int i=0; i < numPts; i++ )
    {
        lobeGenerated[i].SetValid( false );

        const RixBXLobeTraits  lobesToConsider = bxdfLobes & lobesWanted[i];

        const bool  doPraterFuzz = ( lobesToConsider & sg_PraterFuzz_LT ).HasAny();

        if( doPraterFuzz )
        {
            const RtColorRGB Cs = Color[i]*Gain[i];
            const RtNormal3  wn = Orientation[i];
            const RtNormal3  wg = Ng[i];
            const RtVector3  wo = Vn[i];
            const float  g = Direction[i];
            const float  f = Dispersion[i];

            if( !PraterFuzzWeight ) PraterFuzzWeight = lobeWeights.AddActiveLobe( sg_PraterFuzz_LS );

            if( Generate( g, f, wg, wn, wo, xi[i], Cs, wi[i], fPdf[i], rPdf[i], PraterFuzzWeight[i] ))
            {
                lobeGenerated[i] = sg_PraterFuzz_LS;
            }
        }
    }
}

/*
================================================================
EvaluateSample() provides the integrator with a shading context
set of samples evaluated using this bxdf's response lobe(s).
================================================================
*/
void EvaluateSample
(
    RixBXTransportTrait     transportTrait, // Direct, indirect, or both bit field.
    const RixBXLobeTraits*  lobesWanted, // by the integrator, per shading context point.
    RixRNG*                 rixRng, // handle to the random number generator.
    RixBXLobeTraits*        lobesEvaluated, // Returned value.
    const RtVector3*        wi, // incoming sample direction per shading context point.
    // Evaluated results:
    RixBXLobeWeights&       lobeWeights, // sample weight.
    float*                  fPdf, // forward pdf.
    float*                  rPdf  // reverse pdf.
)
{
    const RixBXLobeTraits  bxdfLobes = GetAllLobeTraits();

    RtColorRGB*  PraterFuzzWeight = NULL;

    for( int i=0; i < numPts; i++ )
    {
        lobesEvaluated[i].SetNone();

        const RixBXLobeTraits  lobesToConsider = bxdfLobes & lobesWanted[i];

        const bool  doPraterFuzz = ( lobesToConsider & sg_PraterFuzz_LT ).HasAny();

        if( doPraterFuzz )
        {
            const RtColorRGB Cs = Color[i]*Gain[i];
            const RtNormal3  wn = Orientation[i];
            const RtNormal3  wg = Ng[i];
            const RtVector3  wo = Vn[i];
            const float  g = Direction[i];
            const float  f = Dispersion[i];

            if( !PraterFuzzWeight ) PraterFuzzWeight = lobeWeights.AddActiveLobe( sg_PraterFuzz_LS );

            if( Evaluate( g, f, wg, wn, wo, wi[i], Cs, fPdf[i], rPdf[i], PraterFuzzWeight[i] ))
            {
                lobesEvaluated[i] |= sg_PraterFuzz_LT;
            }
        }
    }
}

/*
=============================================================
Like EvaluateSample(), but does multiple evaluations of this
bxdf's response lobe(s) at a single shading context point.
=============================================================
*/
void EvaluateSamplesAtIndex
(
    RixBXTransportTrait     transportTrait, // Direct, indirect, or both bit field.
    const RixBXLobeTraits&  lobesWanted, // by the integrator, at the scIndex point.
    RixRNG*                 rixRng, // handle to the random number generator.
    int                     scIndex, // shading context point to evaluate.
    int                     nSamps, // number of wi samples to evaluate.
    RixBXLobeTraits*        lobesEvaluated, // Returned value.
    const RtVector3*        wi, // nSamps incoming sample directions.
    // Evaluated results:
    RixBXLobeWeights&       lobeWeights, // sample weight.
    float*                  fPdf, // forward pdf.
    float*                  rPdf  // reverse pdf.
)
{
    const RixBXLobeTraits  bxdfLobes = GetAllLobeTraits();
    const RixBXLobeTraits  lobesToConsider = bxdfLobes & lobesWanted;

    const bool  doPraterFuzz = ( lobesToConsider & sg_PraterFuzz_LT ).HasAny();

    RtColorRGB*  PraterFuzzWeight = NULL;
    if( doPraterFuzz ) PraterFuzzWeight = lobeWeights.AddActiveLobe( sg_PraterFuzz_LS );

    for( int i=0; i < nSamps; i++ )
    {
        lobesEvaluated[i].SetNone();

        if( doPraterFuzz )
        {
            const RtColorRGB Cs = Color[scIndex]*Gain[scIndex];
            const RtNormal3  wn = Orientation[scIndex];
            const RtNormal3  wg = Ng[scIndex];
            const RtVector3  wo = Vn[scIndex];
            const float  g = Direction[scIndex];
            const float  f = Dispersion[scIndex];

            if( Evaluate( g, f, wg, wn, wo, wi[i], Cs, fPdf[i], rPdf[i], PraterFuzzWeight[i] ))
            {
                lobesEvaluated[i] |= sg_PraterFuzz_LT;
            }
        }
    }
}

/*
======================================================================
EmitLocal() produces a shading context set of this bxdf's baked
(pre-integrated) illumination responses and/or light emission results.
======================================================================
*/
bool EmitLocal( RtColorRGB* ) { return false; } // None in this case.
